# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Detect changes

# DESCRIPTION:
# This workflow will determine which categories of jobs should be executed,
# based on detected changes.
# It should be used by the 'ci-orchestrator.yml' and 'cd.yml' to ensure they both use
# the same path's to detect changes.

on:
  workflow_call:
    inputs:
      solution_file:
        required: true
        type: string
      hostnames:
        required: true
        type: string
    outputs:
      affected_changes:
        value: ${{ jobs.changes.outputs.affected_changes }}
      job_context:
        value: ${{ jobs.changes.outputs.job_context }}

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      affected_changes: ${{ steps.filter.outputs.affected_changes }}
      job_context: "{
        'astra': '${{ steps.filter.outputs.astra }}',
        'orion': '${{ steps.filter.outputs.orion }}',
        'dbmigrations': '${{ steps.filter.outputs.dbmigrations }}'
        }"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history so that we can determine the base commit 

      - uses: nrwl/nx-set-shas@v4
        id: set_shas

      - name: Run dotnet-affected
        shell: pwsh
        id: filter
        run: | 
          $hostNames = "${{ inputs.hostnames }}" | ConvertFrom-Json
          $solutionPath = "${{github.workspace}}/${{inputs.solution_file}}"
          $workspacePath = "${{github.workspace}}"
          $fromSha = "${{steps.set_shas.outputs.base}}"
          $toSha = "${{steps.set_shas.outputs.head}}"

          dotnet tool install dotnet-affected --global
          dotnet affected --solution-path $solutionPath -p $workspacePath --from $fromSha --to $toSha --format traversal json

          if (Test-Path affected.proj) { 
            $affectedJson = Get-Content affected.json
            $affectedJson | Write-Host
            $affectedProjects = $affectedJson | ConvertFrom-Json
            "affected_changes=$affectedJson" >> $env:GITHUB_OUTPUT

            foreach ($hostName in $hostNames) {
                foreach ($project in $hostname.PSObject.Properties) {
                    #Write-Host $project.Name
                    foreach ($csprojFile in $project.Value) {
                        #Write-Host $csprojFile

                        foreach ($affectedProjectFilePath in $affectedProjects.Filepath) {
                            if ($affectedProjectFilePath.Contains($csprojFile)) {

                                # No less than 4 foreach loops, I know...
                                Write-Host "$($project.Name) is affected by a change in $affectedProjectFilePath"

                                "$($project.Name)=true" >> $env:GITHUB_OUTPUT
                            }
                        }            
                    }
                }
            }
          } else {
            Write-Host "No projects affected"
            exit 0
          }