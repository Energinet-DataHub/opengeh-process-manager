// Copyright 2020 Energinet DataHub A/S
//
// Licensed under the Apache License, Version 2.0 (the "License2");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System.ComponentModel.DataAnnotations;
using Energinet.DataHub.ProcessManager.Abstractions.Core.ValueObjects;
using Energinet.DataHub.ProcessManager.Core.Domain.OrchestrationInstance;
using NodaTime;
using NodaTime.Text;

namespace Energinet.DataHub.ProcessManager.Core.Domain.SendMeasurements;

/// <summary>
/// A Send Measurements Instance domain model, which is saved to the database. Represents a single
/// BRS-021 Send Measurements process, and handles it's lifecycle.
/// </summary>
public class SendMeasurementsInstance
{
    /// <summary>
    /// Creates a new instance of <see cref="SendMeasurementsInstance"/>.
    /// </summary>
    /// <param name="createdAt"></param>
    /// <param name="createdBy"></param>
    /// <param name="transactionId"></param>
    /// <param name="meteringPointId"></param>
    /// <param name="idempotencyKey">The idempotency key will be SHA-256 hashed and saved as a byte array.</param>
    public SendMeasurementsInstance(
        Instant createdAt,
        Actor createdBy,
        TransactionId transactionId,
        MeteringPointId? meteringPointId,
        IdempotencyKey idempotencyKey)
    {
        Id = SendMeasurementsInstanceId.CreateNew();

        CreatedAt = createdAt;
        CreatedByActorNumber = createdBy.Number;
        CreatedByActorRole = createdBy.Role;

        TransactionId = transactionId;
        MeteringPointId = meteringPointId;

        IdempotencyKey = idempotencyKey.ToHash();
    }

    /// <summary>
    /// Used by Entity Framework
    /// </summary>
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    // ReSharper disable once UnusedMember.Local -- Used by Entity Framework
    private SendMeasurementsInstance()
    {
    }
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    public SendMeasurementsInstanceId Id { get; }

    /// <summary>
    /// A SHA256 hash of the idempotency key, which is saved as a BINARY(32) in the database.
    /// </summary>
    public byte[] IdempotencyKey { get; }

    public Instant CreatedAt { get; }

    public ActorNumber CreatedByActorNumber { get; }

    public ActorRole CreatedByActorRole { get; }

    public TransactionId TransactionId { get; }

    public MeteringPointId? MeteringPointId { get; }

    public Instant? SentToMeasurementsAt { get; private set; }

    public Instant? ReceivedFromMeasurementsAt { get; private set; }

    public Instant? SentToEnqueueActorMessagesAt { get; private set; }

    public Instant? ReceivedFromEnqueueActorMessagesAt { get; private set; }

    public Instant? TerminatedAt { get; private set; }

    public Instant? FailedAt { get; private set; }

    [MaxLength(1000)]
    public string? ErrorText { get; private set; }

    public SendMeasurementsInstanceLifecycle Lifecycle => new SendMeasurementsInstanceLifecycle(
        terminatedAt: TerminatedAt,
        failedAt: FailedAt);

    public SendMeasurementsInputFileStorageReference FileStorageReference => SendMeasurementsInputFileStorageReference.Create(
        CreatedAt,
        CreatedByActorNumber,
        Id);

    /// <summary>
    /// RowVersion is generated by the database and used for optimistic concurrency. Must be retrieved when loading
    /// the entity from the database, since Entity Framework uses it to throw an exception if the entity has been updated.
    /// </summary>
    /// <remarks>
    /// See https://learn.microsoft.com/en-us/ef/core/saving/concurrency?tabs=fluent-api
    /// </remarks>
    internal byte[]? RowVersion { get; }

    public void MarkAsSentToMeasurements(Instant sentToMeasurementsAt)
    {
        if (SentToMeasurementsAt is not null)
            throw new InvalidOperationException($"Cannot mark instance as sent to a measurements (Id={Id.Value}, SentToMeasurementsAt={InstantPattern.General.Format(SentToMeasurementsAt.Value)}).");

        SentToMeasurementsAt = sentToMeasurementsAt;
    }
}
